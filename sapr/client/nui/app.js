var $jscomp = $jscomp || {}; $jscomp.scope = {}; $jscomp.createTemplateTagFirstArg = function (a) { return a.raw = a }; $jscomp.createTemplateTagFirstArgWithRaw = function (a, b) { a.raw = b; return a }; var log = console.log.bind(window.console), paywall = !1; Date.prototype.stdTimezoneOffset = function () { var a = new Date(this.getFullYear(), 0, 1), b = new Date(this.getFullYear(), 6, 1); return Math.max(a.getTimezoneOffset(), b.getTimezoneOffset()) }; Date.prototype.isDstObserved = function () { return this.getTimezoneOffset() < this.stdTimezoneOffset() };
function addZero(a) { return 10 > a ? "0" + a : a } var backlightTimeout; function playButtonPress(a) { clearTimeout(backlightTimeout); a = a ? new Audio("sounds/buttonpress.mp3") : new Audio("sounds/buttondeny.mp3"); $("#radioDisplay").addClass("backlight"); backlightTimeout = setTimeout(function () { $("#radioDisplay").removeClass("backlight") }, 5E3); a.volume = .05; a.play() }
var websocket, wsConnected = !1, disconnectNotified = !1, reconnectThread = setInterval(function () { wsConnected || paywall || (log("Socket connection lost."), init()) }, 1E4), resourceName = "", version = "1.0.0", talkGroup = 1, scannedTalkGroup = 1, scanning = !1, radioEnabled = !1, scanningOn = !1, panicked = !1, radioConnected = !0, talkGroups = [], scannedTalkGroups = [], ipAd = "";
function init() {
"" !== ipAd && (log("attempting a new connection"), websocket && websocket.readyState == websocket.OPEN && (log("existing connection is valid, clearing"), websocket.close(1E3, "Reconnecting")), $("#errorText").text("Linking. . . ."), $("#errorText").css("color", "darkblue"), websocket = new WebSocket(ipAd), websocket.onopen = function () {
    log("connection opened!"); wsConnected = !0; disconnectNotified = !1; $("#radio").removeClass("nolink"); $("#connectionBox").hide(); paywall = !1; $("#errorText").text("Linked"); $("#errorText").css("color",
        "white")
}, websocket.onmessage = function (a) { handleWS(JSON.parse(a.data)) }, websocket.onclose = function () {
    wsConnected = !1; sendWS(JSON.stringify({ type: "disconnect" })); var a = 1E3 == event.code ? "Normal closure, meaning that the purpose for which the connection was established has been fulfilled." : 1001 == event.code ? "An endpoint is 'going away', such as a server going down or a browser having navigated away from a page." : 1002 == event.code ? "An endpoint is terminating the connection due to a protocol error" : 1003 ==
        event.code ? "An endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message)." : 1004 == event.code ? "Reserved. The specific meaning might be defined in the future." : 1005 == event.code ? "No status code was actually present." : 1006 == event.code ? "The connection was closed abnormally, e.g., without sending or receiving a Close control frame" : 1007 == event.code ? "An endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [http://tools.ietf.org/html/rfc3629] data within a text message)." :
            1008 == event.code ? "An endpoint is terminating the connection because it has received a message that 'violates its policy'. This reason is given either if there is no other sutible reason, or if there is a need to hide specific details about the policy." : 1009 == event.code ? "An endpoint is terminating the connection because it has received a message that is too big for it to process." : 1010 == event.code ? "An endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake. <br /> Specifically, the extensions that are needed are: " +
                event.reason : 1011 == event.code ? "A server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request." : 1015 == event.code ? "The connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified)." : "Unknown reason"; $("#nolink").show(); $("#connectionBox").show(); paywall = !0; setTimeout(function () { $("#connectionBox").hide() }, 1E4); $("#radioDisplay").hide(); disconnectNotified || (log("Connection closed: " +
                    a + "(" + event.code + ")"), sendNotification("~r~Radio socket disconnected. Attempting reconnection soon"), disconnectNotified = !0); $("#errorText").text("Not linked"); $("#errorText").css("color", "darkred")
})
} function sendWS(a) { void 0 != websocket && websocket.readyState == websocket.OPEN && websocket.send(a) } function sendNUI(a, b) { $.post("http://" + resourceName + "/" + a, b, function (c) { "ok" != c && log("NUI ERROR: " + c) }) }
function checkRadioState() { $("#nolink").hide(); radioEnabled ? (scanning = !1, $("#topText").text("Channel"), $("#topText").css("color", "black"), $("#topText").show(), $("#chText").text(talkGroups[talkGroup]), $("#chText").css("color", "black"), $("#btm1Text").text("S/L"), $("#btm2Text").text(""), $("#btm3Text").text("Ch 1"), $("#btmText").show(), $("#radioDisplay").fadeIn()) : $("#radioDisplay").fadeOut() } function sendNotification(a) { sendNUI("showNotification", JSON.stringify({ notification: a })) }
function sendAudioNotification(a, b) { sendNUI("audioNotification", JSON.stringify({ sound: a, set: b })) }
$(function () {
    $(document).click(function (a) { 1 > $(a.target).closest("#radio").length && (sendNUI("hide", ""), $("#radio").fadeOut()) }); $("body").keypress(function (a) { 96 != a.charCode && 119 != a.charCode && 97 != a.charCode && 100 != a.charCode && 115 != a.charCode || !$("#radio").is(":visible") || (sendNUI("hide", ""), $("#radio").fadeOut()) }); $("#panicBtn").click(function () { radioEnabled && !panicked && (playButtonPress(!0), sendNUI("panic", "")) }); $("#pwrBtn").click(function () {
        panicked || (scanning = !1, sendWS(JSON.stringify({
            type: "radio_enabled",
            value: !radioEnabled
        })))
    }); $("#chDownBtn").click(function () { radioEnabled && !panicked && (2 > talkGroup ? talkGroup = talkGroups.length - 1 : talkGroup-- , playButtonPress(!0), sendWS(JSON.stringify({ type: "set_talkgroup", talkgroup: talkGroup }))) }); $("#chUpBtn").click(function () { radioEnabled && !panicked && (talkGroups.length - 1 == talkGroup ? talkGroup = 1 : talkGroup++ , playButtonPress(!0), sendWS(JSON.stringify({ type: "set_talkgroup", talkgroup: talkGroup }))) }); $("#softBtn1").click(function () {
        if (radioEnabled && !panicked) if (scanning =
            !scanning, playButtonPress(!0), scanning) { $("#topText").text("Scan Channels"); scanningOn && $("#topText").css("color", "green"); $("#chText").text(talkGroups[scannedTalkGroup]); var a = "Set"; -1 < scannedTalkGroups.indexOf(scannedTalkGroup) ? ($("#chText").css("color", "green"), a = "Unset") : $("#chText").css("color", "black"); $("#btm1Text").text("S/L"); $("#btm2Text").text(a); $("#btm3Text").text(scanningOn ? "Off" : "On") } else checkRadioState()
    }); $("#softBtn2").click(function () {
        radioEnabled && (panicked || (scanning ? sendWS(JSON.stringify({
            type: "scan_talkgroup",
            talkgroup: scannedTalkGroup
        })) : playButtonPress(!1)))
    }); $("#softBtn3").click(function () {
        radioEnabled && (playButtonPress(!0), scanning ? panicked || (scanningOn = !scanningOn, sendWS(JSON.stringify({ type: "scan_state", state: scanningOn })), scanningOn ? ($("#topText").css("color", "green"), $("#topText").text("Scan enabled"), $("#btm3Text").text("Off")) : ($("#topText").text("Scan disabled"), $("#topText").css("color", "red"), $("#btm3Text").text("On")), setTimeout(function () {
            scanning ? ($("#topText").text("Scan Channels"), $("#topText").css("color",
                scanningOn ? "green" : "black")) : $("#topText").text("Channel")
        }, 2E3)) : 1 != talkGroup && (talkGroup = 1, sendWS(JSON.stringify({ type: "set_talkgroup", talkgroup: talkGroup }))))
    }); $("#softBtn4").click(function () {
        if (radioEnabled && !panicked) if (playButtonPress(!0), scanning) {
            2 > scannedTalkGroup ? scannedTalkGroup = talkGroups.length - 1 : scannedTalkGroup--; $("#chText").text(talkGroups[scannedTalkGroup]); var a = "Set"; -1 < scannedTalkGroups.indexOf(scannedTalkGroup) ? ($("#chText").css("color", "green"), a = "Unset") : $("#chText").css("color",
                "black"); $("#btm1Text").text("S/L"); $("#btm2Text").text(a); $("#btm3Text").text(scanningOn ? "Off" : "On")
        } else 2 > talkGroup ? talkGroup = talkGroups.length - 1 : talkGroup-- , sendWS(JSON.stringify({ type: "set_talkgroup", talkgroup: talkGroup }))
    }); $("#softBtn5").click(function () { panicked || (scanning ? (playButtonPress(!0), $("#softBtn1").click()) : playButtonPress(!1)) }); $("#softBtn6").click(function () {
        if (radioEnabled && !panicked) if (playButtonPress(!0), scanning) {
        talkGroups.length - 1 == scannedTalkGroup ? scannedTalkGroup = 1 : scannedTalkGroup++;
            $("#chText").text(talkGroups[scannedTalkGroup]); var a = "Set"; -1 < scannedTalkGroups.indexOf(scannedTalkGroup) ? ($("#chText").css("color", "green"), a = "Unset") : $("#chText").css("color", "black"); $("#btm1Text").text("S/L"); $("#btm2Text").text(a); $("#btm3Text").text(scanningOn ? "Off" : "On")
        } else talkGroups.length - 1 == talkGroup ? talkGroup = 1 : talkGroup++ , sendWS(JSON.stringify({ type: "set_talkgroup", talkgroup: talkGroup }))
    }); $(".dummybtn").click(function () { playButtonPress(!1) }); window.onbeforeunload = function () {
    websocket.onclose =
        function () { }; websocket.close()
    }; window.addEventListener("message", function (a) { handleNUI(a.data) })
});
function handleNUI(a) {
    "resource_name" == a.type ? (resourceName = a.name, version = a.version) : "show_radio" == a.type ? ($("#radio").fadeIn(), a = new Date, (3 == a.getMonth() && 1 == a.getDate() || 2 == a.getMonth() && 16 == a.getDate()) && $("#img").attr("src", "images/radio_final.png")) : "hide_radio" == a.type ? $("#radio").fadeOut() : "911" == a.type ? sendWS(JSON.stringify({ type: "911", street: a.street, postal: a.postal, realPostal: a.postal })) : "priority_911" == a.type ? sendWS(JSON.stringify({ type: "priority_911", street: a.street, postal: a.postal, realPostal: a.postal })) :
        "panic" == a.type ? radioConnected && sendWS(JSON.stringify({ type: "emergency_button", street: a.street, postal: a.postal })) : "heartbeat" == a.type ? websocket.readyState == websocket.OPEN ? (websocket.send(JSON.stringify({ type: "heartbeat" })), $("#radio").removeClass("nolink")) : (wsConnected = !1, $("#radioDisplay").hide(), $("#nolink").show(), $("#radio").addClass("nolink")) : "location_update" == a.type ? (sendWS(JSON.stringify({ type: "player_coordinates", x: Math.round(a.x), y: Math.round(a.y), z: Math.round(a.z) })), a = new Date, $("#time").text(addZero(a.getUTCHours()) +
            ":" + addZero(a.getUTCMinutes()) + "z")) : "connection_status" == a.type ? ((radioConnected = a.status) ? ($("#rangeText").hide(), radioEnabled && sendNotification("~g~Radio signal acquired")) : ($("#rangeText").show(), radioEnabled && sendNotification("~r~Radio signal lost")), sendWS(JSON.stringify({ type: "connection_status", connected: a.status, postal: a.postal, street: a.street }))) : "reconnect" == a.type ? (log("Reconnection attempt forced by user."), websocket.onclose = function () { }, websocket.close(), init()) : "tower_size" == a.type ?
                ($("#towerBar1").hide(), $("#towerBar3").hide(), $("#towerBar2").hide(), 1 == a.tower && radioEnabled ? $("#towerBar1").show() : 2 == a.tower && radioEnabled ? ($("#towerBar1").show(), $("#towerBar2").show()) : 3 == a.tower && radioEnabled && ($("#towerBar1").show(), $("#towerBar2").show(), $("#towerBar3").show())) : "radio_increment" === a.type ? $(".channel-up").first().click() : "radio_decrement" === a.type ? $(".channel-down").first().click() : "radio_try_set_talkgroup" === a.type ? (a = talkGroups.indexOf(a.name), -1 < a ? sendWS(JSON.stringify({
                    type: "set_talkgroup",
                    talkgroup: a
                })) : sendNotification("Unknown talkgroup name")) : "radio_volume_increase" === a.type ? sendWS(JSON.stringify({ type: "volume_increase" })) : "radio_volume_decrease" === a.type ? sendWS(JSON.stringify({ type: "volume_decrease" })) : "socket_data" === a.type ? (ipAd = a.info, init()) : log("Unrecognized command: " + a.type)
}
function handleWS(a) {
    if ("initial_data" != a.type) if ("radio_enabled" == a.type) radioEnabled = a.enabled, sendNotification("Radio " + (radioEnabled ? "~g~enabled" : "~r~disabled")), sendNUI("radioState", JSON.stringify({ state: radioEnabled })), radioEnabled && ($("#radioDisplay").addClass("backlight"), clearTimeout(backlightTimeout), backlightTimeout = setTimeout(function () { $("#radioDisplay").removeClass("backlight") }, 5E3)), checkRadioState(); else if ("talkgroup_list" == a.type) talkGroups = Object.keys(a.talkgroups).map(function (d) { return a.talkgroups[d] }),
        talkGroups.unshift("Not Set"); else if ("set_talkgroup" == a.type) talkGroup = a.talkgroup, scanning || $("#chText").text("" + talkGroups[talkGroup]), $("#talkAround").toggle(a.is_talkaround), radioEnabled && sendNotification("Talkgroup set to ~g~" + talkGroups[talkGroup]); else if ("scanned_channels" == a.type) scannedTalkGroups = Object.keys(a.talkgroups).map(function (d) { return parseInt(a.talkgroups[d]) }), scanning && (-1 < scannedTalkGroups.indexOf(scannedTalkGroup) ? ($("#chText").css("color", "green"), $("#btm2Text").text("Unset")) :
            ($("#chText").css("color", "black"), $("#btm2Text").text("Set"))); else if ("scanning_enabled" == a.type) scanningOn = a.enabled, $("#scanning").toggle(scanningOn); else if ("911_status" == a.type) sendNotification(a.message); else if ("emergency_status" == a.type) { var b = "officer emergency"; a.approved ? panicked = !0 : b = "denied: cooldown"; $("#topText").hide(); $("#btmText").hide(); $("#chText").text(b); setTimeout(function () { panicked = !1; checkRadioState() }, 3E3) } else if ("scan_result" == a.type) a.channel_scannable ? playButtonPress(!0) :
                playButtonPress(!1); else if ("emergency_event" == a.type) radioConnected && sendNUI("panic_button", JSON.stringify({ unit: a.unit, postal: a.postal, street: a.street, posX: a.x, posY: a.y })); else if ("error" == a.type) log("ERROR: " + a.message), sendNotification("~r~" + a.message); else if ("radio_ping" == a.type) sendNotification("~o~Your radio has been pinged! ~r~Please pay attention to your radio"), sendAudioNotification("MENU_ACCEPT", "Phone_SoundSet_Default"); else if ("radio_stun" == a.type) sendNotification("~o~Your radio has been stunned. ~r~Please watch your RTO"),
                    sendAudioNotification("5_Second_Timer", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS"); else if ("notification" == a.type) sendNotification(a.text); else if ("channel_display" == a.type) { var c = $("#chText").text(); a.text(substr(0, 20)) != c && ($("#chText").text(a.text.substr(0, 20)), 0 < a.duration && setTimeout(function () { $("#chText").text(c) }, a.duration)) } else "radio_volume" === a.type && ($(".free-text").text("Volume: " + a.volume_modifier), console.log("dat", displayTimeout), null !== displayTimeout && clearTimeout(displayTimeout), displayTimeout =
                        setTimeout(function () { $(".free-text").text(talkGroups[talkGroup]) }, 3E3))
};